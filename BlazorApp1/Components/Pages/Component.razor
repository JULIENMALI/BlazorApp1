@page "/test"
@rendermode InteractiveServer
@using BlazorApp1.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container">
    <div class="hall">
        <h1 style="text-align:center; margin-bottom:20px;">SCÈNE</h1>
      
        <div class="gold-zone">
            @foreach (var row in GroupSeats("Gold"))
            {
                <div class="seat-row">
                    @foreach (var place in row)
                    {
                        var placeType = GetPlaceTypeName(place);
                        var isSelectedType = placeType == SelectedType;
                        <button class="seat-button @(place.Occupee ? "reserved" : SelectedPlace == place ? "selected" : (isSelectedType ? "free" : "neutral"))"
                                style="width:70px; height:40px; margin:3px;"
                                disabled="@place.Occupee"
                                @onclick="() => SelectPlace(place)">
                            @place.Id
                        </button>
                    }
                </div>
            }
        </div>

        <div class="normale-zone">
            @foreach (var row in GroupSeats("Normale"))
            {
                <div class="seat-row">
                    @foreach (var place in row)
                    {
                        var placeType = GetPlaceTypeName(place);
                        var isSelectedType = placeType == SelectedType;
                        <button class="seat-button @(place.Occupee ? "reserved" : SelectedPlace == place ? "selected" : (isSelectedType ? "free" : "neutral"))"
                                style="width:60px; height:30px; margin:3px;"
                                disabled="@place.Occupee"
                                @onclick="() => SelectPlace(place)">
                            @place.Id
                        </button>
                    }
                </div>
            }
        </div>

        <div class="back-vip">
            @foreach (var row in GroupSeats("VIP"))
            {
                <div class="seat-row">
                    @foreach (var place in row)
                    {
                        var placeType = GetPlaceTypeName(place);
                        var isSelectedType = placeType == SelectedType;
                        <button class="seat-button @(place.Occupee ? "reserved" : SelectedPlace == place ? "selected" : (isSelectedType ? "free" : "neutral"))"
                                style="width:100px; height:60px; margin:3px;"
                                disabled="@place.Occupee"
                                @onclick="() => SelectPlace(place)">
                            @place.Id
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (SelectedPlace != null)
{
    <div class="confirm-container">
        <button class="confirm" @onclick="ConfirmReservation">✅ Confirmer la réservation</button>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string type { get; set; }

    private string SelectedType = "Normale";
    private Place SelectedPlace;
    private bool _loaded = false;

    private readonly HashSet<string> AllowedTypes = new() { "Gold", "Normale", "VIP" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded)
        {
            if (!string.IsNullOrWhiteSpace(type) && AllowedTypes.Contains(type))
            {
                SelectedType = type;
            }
            else
            {
                SelectedType = "Normale"; // fallback
            }
            await LoadReservationsFromLocalStorage();
            _loaded = true;
            StateHasChanged();
        }
    }

    private List<List<Place>> GroupSeats(string type)
    {
        int cols = type switch
        {
            "Gold" => 12,
            "VIP" => 6,
            _ => 20
        };
        var places = DataBase.Instance.Places
            .Where(p => GetPlaceTypeName(p) == type)
            .ToList();
        var grouped = new List<List<Place>>();
        for (int i = 0; i < places.Count; i += cols)
        {
            grouped.Add(places.GetRange(i, Math.Min(cols, places.Count - i)));
        }
        return grouped;
    }

    private string GetPlaceTypeName(Place place) => place switch
    {
        PlaceGold _ => "Gold",
        PlaceNormale _ => "Normale",
        PlaceVIP _ => "VIP",
        _ => "Unknown"
    };

    private void SelectPlace(Place place)
    {
        if (!place.Occupee && GetPlaceTypeName(place) == SelectedType)
        {
            SelectedPlace = place;
        }
    }

    private async Task ConfirmReservation()
    {
        if (SelectedPlace != null)
        {
            SelectedPlace.Occupee = true;
            await SaveReservationsToLocalStorage();
            SelectedPlace = null;
            StateHasChanged();
        }
    }

    private async Task LoadReservationsFromLocalStorage()
    {
        var reservedIds = await localStorage.GetItemAsync<List<int>>("reservedPlaces") ?? new List<int>();
        foreach (var id in reservedIds)
        {
            var place = DataBase.Instance.Places.Find(p => p.Id == id);
            if (place != null)
            {
                place.Occupee = true;
            }
        }
    }

    private async Task SaveReservationsToLocalStorage()
    {
        var reservedIds = DataBase.Instance.Places.Where(p => p.Occupee).Select(p => p.Id).ToList();
        await localStorage.SetItemAsync("reservedPlaces", reservedIds);
    }
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 80vh;
        max-width: 900px;
        margin: auto;
        position: relative;
    }

    .seat-row {
        display: flex;
        gap: 5px;
        justify-content: center;
    }

    .seat-button {
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        color: white;
        transition: background-color 0.3s ease;
        position: relative;
        z-index: 10;
    }

    .reserved {
        background-color: darkred;
        cursor: default;
    }

    .free {
        background-color: green;
    }

    .neutral {
        background-color: darkblue;
        color: white;
        cursor: default;
    }

    .selected {
        background-color: orange;
    }

    .confirm-container {
        margin-top: 25px;
        text-align: center;
        position: relative;
        z-index: 10;
    }

    .confirm {
        background-color: darkblue;
        color: white;
        padding: 10px 24px;
        font-size: 18px;
        border-radius: 10px;
        cursor: pointer;
        border: none;
    }

    .hall {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .gold-zone, .back-vip {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .normale-zone {
        display: flex;
        flex-direction: column;
        gap: 8px;
        flex: 1;
    }
</style>
