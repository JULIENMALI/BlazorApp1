@page "/test"
@rendermode InteractiveServer
@using BlazorApp1.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1 style="text-align:center; margin-bottom:20px;">SCÈNE</h1>

<div class="container">
    <nav class="type-selector">
        @foreach (var t in new[] { "Gold", "Normale", "VIP" })
        {
            <button class="type-button @(SelectedType == t ? "active" : "")" @onclick="() => ChangeType(t)">
                @t
            </button>
        }
    </nav>

    <div class="seats-layout">
        <div class="main-seats">
            @foreach (var row in GroupSeats(SelectedType).Where(r => SelectedType != "VIP"))
            {
                <div class="seat-row">
                    @foreach (var place in row)
                    {
                        <button class="seat-button @(place.Occupee ? "reserved" : SelectedPlace == place ? "selected" : "free")"
                                style="width:@(SelectedType == "Gold" ? "70px" : "60px"); height:@(SelectedType == "Gold" ? "40px" : "30px");"
                                disabled="@place.Occupee"
                                @onclick="() => SelectPlace(place)">
                            @place.Id
                        </button>
                    }
                </div>
            }
        </div>
        @if (SelectedType != "VIP")
        {
            <div class="vip-seats-side">
                <h3>VIP</h3>
                @foreach (var row in GroupSeats("VIP"))
                {
                    <div class="seat-row-vertical">
                        @foreach (var place in row)
                        {
                            <button class="seat-button @(place.Occupee ? "reserved" : SelectedPlace == place ? "selected" : "free")"
                                    style="width: 100px; height: 60px; margin: 3px;"
                                    disabled="@place.Occupee"
                                    @onclick="() => SelectPlace(place)">
                                @place.Id
                            </button>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (SelectedPlace != null)
{
    <div class="confirm-container">
        <button class="confirm" @onclick="ConfirmReservation">✅ Confirmer la réservation</button>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string type { get; set; }

    private string SelectedType = "Normale";
    private Place SelectedPlace;
    private bool _loaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded)
        {
            if (!string.IsNullOrWhiteSpace(type))
            {
                SelectedType = type;
            }
            await LoadReservationsFromLocalStorage();
            _loaded = true;
            StateHasChanged();
        }
    }

    private void ChangeType(string type)
    {
        SelectedType = type;
        SelectedPlace = null;
    }

    private List<List<Place>> GroupSeats(string type)
    {
        int cols = type switch
        {
            "Gold" => 12,
            "VIP" => 6,
            _ => 20
        };
        var places = DataBase.Instance.Places
            .Where(p => GetPlaceTypeName(p) == type)
            .ToList();

        var grouped = new List<List<Place>>();
        for (int i = 0; i < places.Count; i += cols)
        {
            grouped.Add(places.GetRange(i, Math.Min(cols, places.Count - i)));
        }
        return grouped;
    }

    private string GetPlaceTypeName(Place place) => place switch
    {
        PlaceGold _ => "Gold",
        PlaceNormale _ => "Normale",
        PlaceVIP _ => "VIP",
        _ => "Unknown"
    };

    private void SelectPlace(Place place)
    {
        if (!place.Occupee)
        {
            SelectedPlace = place;
        }
    }

    private async Task ConfirmReservation()
    {
        if (SelectedPlace != null)
        {
            SelectedPlace.Occupee = true;
            await SaveReservationsToLocalStorage();
            SelectedPlace = null;
            StateHasChanged();
        }
    }

    private async Task LoadReservationsFromLocalStorage()
    {
        var reservedIds = await localStorage.GetItemAsync<List<int>>("reservedPlaces") ?? new List<int>();
        foreach (var id in reservedIds)
        {
            var place = DataBase.Instance.Places.Find(p => p.Id == id);
            if (place != null)
            {
                place.Occupee = true;
            }
        }
    }

    private async Task SaveReservationsToLocalStorage()
    {
        var reservedIds = DataBase.Instance.Places
                          .Where(p => p.Occupee)
                          .Select(p => p.Id)
                          .ToList();
        await localStorage.SetItemAsync("reservedPlaces", reservedIds);
    }
}
<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 80vh;
        max-width: 900px;
        margin: auto;
        position: relative;
    }

    .type-selector {
        margin-bottom: 25px;
        z-index: 10;
    }

    .type-button {
        background-color: lightgray;
        border: none;
        padding: 10px 20px;
        margin: 0 5px;
        font-weight: bold;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        position: relative;
        z-index: 11;
    }

        .type-button.active {
            background-color: darkblue;
            color: white;
        }

    .seats-layout {
        display: flex;
        justify-content: center;
        width: 100%;
        gap: 40px;
        position: relative;
        z-index: 10;
    }

    .main-seats {
        display: flex;
        flex-direction: column;
        gap: 8px;
        flex: 1;
        position: relative;
        z-index: 10;
    }

    .seat-row {
        display: flex;
        gap: 5px;
        justify-content: center;
    }

    .vip-seats-side {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 120px;
        border-left: 3px solid #ccc;
        padding-left: 15px;
        position: relative;
        z-index: 10;
    }

    .seat-row-vertical {
        display: flex;
        flex-direction: column;
        margin-bottom: 12px;
        gap: 6px;
    }

    .seat-button {
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        color: white;
        transition: background-color 0.3s ease;
        position: relative;
        z-index: 10;
    }

    .reserved {
        background-color: darkred;
        cursor: default;
    }

    .free {
        background-color: green;
    }

    .selected {
        background-color: orange;
    }

    .confirm-container {
        margin-top: 25px;
        text-align: center;
        position: relative;
        z-index: 10;
    }

    .confirm {
        background-color: darkblue;
        color: white;
        padding: 10px 24px;
        font-size: 18px;
        border-radius: 10px;
        cursor: pointer;
        border: none;
    }
</style>
